name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      DOCKER_REGISTRY: ""
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ./Banana.sln
    
    - name: Build
      run: dotnet build ./Banana.sln --configuration Release --no-restore
    
    - name: Test
      run: dotnet test ./Banana.sln --configuration Release --no-build --verbosity normal
    
    - name: Start PostgreSQL
      run: |
        docker compose up -d db-postgres
        # Wait for PostgreSQL to be ready
        sleep 10
    
    - name: Run Database Migrations
      run: |
        # Install FluentMigrator.Console tool if not already in your project
        dotnet tool install --global FluentMigrator.DotNet.Cli
        
        # Run migrations
        dotnet fm migrate -p postgres -c "Host=localhost;Database=banana;Username=postgres;Password=postgres" -a ./path/to/your/migrations/assembly.dll
        
    - name: Build and start Docker services
      run: docker compose up -d --build
    
    - name: Stop Docker services
      run: docker compose down
      if: always()  # Always run this step, even if previous steps fail
